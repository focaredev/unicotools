 Public Sub MessageHandlers()

        While True

            Try

                If Variaveis.MonitoraMsg = True Then

                    If Me.IsDisposed Then
                        Exit While
                    End If

                    Dim ListMessages As String() = {"JavaScript error", "Mensagem", "Internal Error", "Problema", "Form Closing", "Mensagens de Validaçăo", "Java Console"}

                    Win32Utils.FechaJanelaPorTextoList("jp2launcher", Variaveis.NomeJanelaVivoNextGlobal, ListMessages)

                End If


            Catch ex As Exception

            End Try

        End While

    End Sub

    If Variaveis.IniciaMsg = True Then
            Variaveis.IniciaMsg = False
            Variaveis.MonitoraMsg = True
            Dim ThreadInicializaMessageHandler As New Thread(Sub() MessageHandlers())
            ThreadInicializaMessageHandler.SetApartmentState(ApartmentState.STA)
            ThreadInicializaMessageHandler.Start()
        End If



Imports System.Runtime.InteropServices
Imports System.Text
Imports System.IO

Public Class Win32Utils

    Public Const WM_CLOSE As UInt32 = &H10
    Public Const SW_RESTORE As Integer = 9
    Public Const SW_MINIMIZE As Integer = 6
    Public Const WM_KEYDOWN As Integer = &H100
    Public Const WM_KEYUP As Integer = &H101
    Public Const WM_CHAR As Int32 = &H102
    Public Const VK_RETURN As Int32 = &HD
    Public Const VK_ENTER As Integer = &HD
    Public Const VK_ESCAPE As Integer = &H1B


    <DllImport("user32.dll", CharSet:=CharSet.Auto)>
    Public Shared Function SendMessage(ByVal hWnd As IntPtr, ByVal Msg As UInt32, ByVal wParam As IntPtr, ByVal lParam As IntPtr) As IntPtr

    End Function


    Delegate Function EnumDelegate(ByVal hWnd As IntPtr, ByVal lParam As IntPtr) As Boolean
    <DllImport("user32.dll", SetLastError:=True, CharSet:=CharSet.Auto)>
    Private Shared Function GetClassName(ByVal hWnd As IntPtr, ByVal lpClassName As StringBuilder, ByVal nMaxCount As Integer) As Integer

    End Function
    <DllImport("user32.dll", SetLastError:=True)>
    Public Shared Function FindWindowEx(ByVal hwndParent As IntPtr, ByVal hwndChildAfter As IntPtr, ByVal className As String, ByVal lpszWindow As String) As IntPtr

    End Function
    <DllImport("user32.dll")>
    Private Shared Function EnumThreadWindows(ByVal dwThreadId As Integer, ByVal lpfn As EnumDelegate, ByVal lParam As IntPtr) As Boolean

    End Function
    <DllImport("user32.dll")>
    Public Shared Function SendMessage(ByVal hWnd As IntPtr, ByVal Msg As UInt32, ByVal wParam As IntPtr,
    <MarshalAs(UnmanagedType.LPStr)> ByVal lParam As String) As IntPtr

    End Function

    <DllImport("user32.dll", CharSet:=CharSet.Unicode, SetLastError:=True)>
    Public Shared Function GetWindowText(ByVal hWnd As IntPtr, ByVal lpString As StringBuilder, ByVal nMaxCount As Integer) As Integer

    End Function

    Declare Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As IntPtr

    <DllImport("user32.dll")>
    Public Shared Function ShowWindow(ByVal Hwnd As IntPtr, ByVal iCmdShow As Integer) As Integer

    End Function

    <DllImport("user32.dll")>
    Public Shared Function MoveWindow(ByVal hWnd As IntPtr, ByVal x As Integer, ByVal y As Integer, ByVal nWidth As Integer, ByVal nHeight As Integer, ByVal bRepaint As Boolean) As Boolean
    End Function

    <DllImport("user32.dll")>
    Public Shared Function PostMessage(ByVal hWnd As IntPtr, ByVal msg As UInteger, ByVal wParam As IntPtr, ByVal lParam As IntPtr) As Boolean
    End Function

    <DllImport("user32.dll", SetLastError:=True, CharSet:=CharSet.Auto)> _
    Public Shared Function SetParent(ByVal hWndChild As IntPtr, ByVal hWndNewParent As IntPtr) As IntPtr
    End Function

    <DllImport("user32.dll")> _
    Private Shared Function SetForegroundWindow(ByVal hWnd As IntPtr) As <MarshalAs(UnmanagedType.Bool)> Boolean
    End Function

    Public Shared Function GetWindowByClassName(ByVal windows As IEnumerable(Of IntPtr), ByVal className As String) As IntPtr
        For Each window As IntPtr In windows
            Dim sb = New StringBuilder(256)
            GetClassName(window, sb, sb.Capacity)
            If sb.ToString() = className Then Return window
        Next

        Return IntPtr.Zero
    End Function

    Public Shared Function GetWindowByText(ByVal windows As IEnumerable(Of IntPtr), ByVal windowText As String) As IntPtr
        For Each window As IntPtr In windows
            Dim sb = New StringBuilder(256)
            GetWindowText(window, sb, sb.Capacity)
            If sb.ToString().Contains(windowText) Then Return window
        Next

        Return IntPtr.Zero
    End Function

    Public Shared Function EnumerateProcessWindowHandles(ByVal process As Process) As IEnumerable(Of IntPtr)
        Dim [handles] = New List(Of IntPtr)()

        For Each thread As ProcessThread In process.Threads
            EnumThreadWindows(thread.Id, Function(hWnd, lParam)
                                             [handles].Add(hWnd)
                                             Return True
                                         End Function, IntPtr.Zero)
        Next

        Return [handles]
    End Function

    Public Shared Function FechaJanelaPorTexto(TituloProcesso As String, JanelaPrincipal As String, JanelaProcurada As String)
        Dim Retorno = False
        Try

            For Each Processo As Process In Process.GetProcessesByName(TituloProcesso)
                If Processo.MainWindowTitle.Contains(JanelaPrincipal) Then
                    Dim windows = Win32Utils.EnumerateProcessWindowHandles(Processo)
                    Dim JanelaMensagem = Win32Utils.GetWindowByText(windows, JanelaProcurada)
                    If JanelaMensagem <> IntPtr.Zero Then
                        Win32Utils.SendMessage(JanelaMensagem, Win32Utils.WM_CLOSE, IntPtr.Zero, IntPtr.Zero)
                        Retorno = True
                    End If
                End If
            Next

        Catch ex As Exception

        End Try
        Return Retorno
    End Function

    Public Shared Function EsperaJanelaPorTexto(TituloProcesso As String, JanelaPrincipal As String, JanelaProcurada As String)
        Dim Retorno = False
        Try

            For Each Processo As Process In Process.GetProcessesByName(TituloProcesso)
                If Processo.MainWindowTitle.Contains(JanelaPrincipal) Then
                    Dim windows = Win32Utils.EnumerateProcessWindowHandles(Processo)
                    Dim JanelaMensagem = Win32Utils.GetWindowByText(windows, JanelaProcurada)
                    If JanelaMensagem <> IntPtr.Zero Then
                        Retorno = True
                    End If
                End If
            Next

        Catch ex As Exception

        End Try
        Return Retorno
    End Function

    Public Shared Function LocalizaHwndVivoNext(NomeJanela As String) As IntPtr
        Dim Retorno = IntPtr.Zero
        Try

            For Each Processo As Process In Process.GetProcessesByName("jp2launcher")
                If Processo.MainWindowTitle.Contains(NomeJanela) Then
                    Retorno = Processo.MainWindowHandle
                    Exit For
                End If
            Next

        Catch ex As Exception

        End Try
        Return Retorno
    End Function

    Public Shared Function LocalizaPidVivoNext(NomeJanela As String) As IntPtr
        Dim Retorno = IntPtr.Zero
        Try

            For Each Processo As Process In Process.GetProcessesByName("jp2launcher")
                If Processo.MainWindowTitle.Contains(NomeJanela) Then
                    Retorno = Processo.Id
                    Exit For
                End If
            Next

        Catch ex As Exception

        End Try
        Return Retorno
    End Function


    Public Shared Function FechaJanelaPorTextoList(TituloProcesso As String, JanelaPrincipal As String, JanelasProcuradas As String())
        Dim Retorno = False
        Try

            For Each JanelaProcurada In JanelasProcuradas
                For Each Processo As Process In Process.GetProcessesByName(TituloProcesso)
                    Processo.Refresh()
                    If Processo.MainWindowTitle.Contains(JanelaPrincipal) Then
                        Dim windows = Win32Utils.EnumerateProcessWindowHandles(Processo)
                        Dim JanelaMensagem = Win32Utils.GetWindowByText(windows, JanelaProcurada)
                        If JanelaMensagem <> IntPtr.Zero Then
                            Win32Utils.SendMessage(JanelaMensagem, Win32Utils.WM_CLOSE, IntPtr.Zero, IntPtr.Zero)
                            Retorno = True
                        End If
                    End If
                Next
            Next

        Catch ex As Exception

        End Try
        Return Retorno
    End Function

    Public Shared Function AcaoWarningJava(TituloProcesso As String, JanelaWarning As String, BotaoAcaoWarning As String)
        Dim Retorno = False
        Try

            Dim JanelaMensagem = Win32Utils.FindWindow("SunAwtDialog", JanelaWarning)
            If JanelaMensagem <> IntPtr.Zero Then
                Try
                    JavaJsonInteg.AguardaInfoDialogNovo(JanelaWarning, BotaoAcaoWarning, 10)
                    JavaJsonInteg.doClickDialog(JanelaWarning, BotaoAcaoWarning)
                    Retorno = True
                Catch ex As Exception

                End Try
            End If

        Catch ex As Exception

        End Try
        Return Retorno
    End Function

    Public Shared Function FocaJanelaPorTextoList(TituloProcesso As String, JanelaPrincipal As String, JanelasProcuradas As String())
        Dim Retorno = False
        Try

            For Each JanelaProcurada In JanelasProcuradas
                For Each Processo As Process In Process.GetProcessesByName(TituloProcesso)
                    If Processo.MainWindowTitle.Contains(JanelaPrincipal) Then
                        Dim windows = Win32Utils.EnumerateProcessWindowHandles(Processo)
                        Dim JanelaMensagem = Win32Utils.GetWindowByText(windows, JanelaProcurada)
                        If JanelaMensagem <> IntPtr.Zero Then
                            Win32Utils.SetForegroundWindow(JanelaMensagem)
                            Retorno = True
                        End If
                    End If
                Next
            Next

        Catch ex As Exception

        End Try
        Return Retorno
    End Function

    Public Shared Sub EncerraRoboExecNext()
        Try

FinalizaProcessoErr:

            Dim pr = (From p In Process.GetProcesses() Where p.ProcessName.Contains("jp2launcher") Select p)

            For Each p As Process In pr
                Try
                    If p.MainWindowHandle = Variaveis.hWndVivoNextGlobal Or p.MainWindowHandle = Variaveis.hWndVivoNextTemp Then
                        p.Kill()
                    End If
                Catch ex As Exception
                End Try
            Next


        Catch ex As Exception
            GoTo FinalizaProcessoErr
        End Try
        Querys.LiberaControleDeSessao()
        Querys.DeletaRoboTravado(Variaveis.IDRobo)
        DeleteFolder(String.Format("C:\f\{0}", Variaveis.IDRobo))
        Process.GetCurrentProcess.Kill()
    End Sub

    Public Shared Sub EncerraRoboExecNextSenhaInvalida()
        Try

FinalizaProcessoErr:

            Dim pr = (From p In Process.GetProcesses() Where p.ProcessName.Contains("jp2launcher") Select p)

            For Each p As Process In pr
                Try
                    p.Kill()
                Catch ex As Exception
                End Try
            Next


        Catch ex As Exception
            GoTo FinalizaProcessoErr
        End Try
        Querys.LiberaControleDeSessao()
        Querys.DeletaRoboTravado(Variaveis.IDRobo)
        DeleteFolder(String.Format("C:\f\{0}", Variaveis.IDRobo))
        Process.GetCurrentProcess.Kill()
    End Sub


    Public Shared Sub DeleteFolder(StrPath As String)
        Try

            If Directory.Exists(StrPath) Then
                Directory.Delete(StrPath, True)
            End If

        Catch ex As Exception

        End Try
    End Sub

End Class
